import streamlit as st

st.set_page_config(layout="wide")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è ===
def init_state():
    for prefix in ["user", "support"]:
        if f"{prefix}_topics" not in st.session_state:
            st.session_state[f"{prefix}_topics"] = {}
        if f"{prefix}_active_topic" not in st.session_state:
            topic_name = f"–ù–æ–≤–∞—è —Ç–µ–º–∞"
            st.session_state[f"{prefix}_active_topic"] = topic_name
            st.session_state[f"{prefix}_topics"][topic_name] = []

init_state()

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–º—ã –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é ===
def generate_topic_name(message):
    short = message.strip().split("\n")[0][:30]
    return short if short else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"

# === –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–æ–ª–∏ ===
def sidebar(role):
    prefix = f"{role}_"
    topics = st.session_state[f"{prefix}topics"]
    active_topic = st.session_state[f"{prefix}active_topic"]

    with st.sidebar:
        st.markdown(f"### {'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' if role == 'user' else 'üõ†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞'}")
        st.markdown("#### –¢–µ–º—ã")

        # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ç–µ–º—ã
        if st.button("‚ûï –ù–æ–≤–∞—è —Ç–µ–º–∞", key=f"new_topic_{role}"):
            topic_name = "–ù–æ–≤–∞—è —Ç–µ–º–∞"
            counter = 1
            while topic_name in topics:
                topic_name = f"–ù–æ–≤–∞—è —Ç–µ–º–∞ {counter}"
                counter += 1
            topics[topic_name] = []
            st.session_state[f"{prefix}active_topic"] = topic_name

        # –°–ø–∏—Å–æ–∫ —Ç–µ–º
        for topic in list(topics.keys()):
            col1, col2 = st.columns([0.85, 0.15])
            with col1:
                if st.button(topic, key=f"select_{role}_{topic}"):
                    st.session_state[f"{prefix}active_topic"] = topic
            with col2:
                if st.button("üóëÔ∏è", key=f"delete_{role}_{topic}"):
                    topics.pop(topic)
                    if topic == active_topic:
                        st.session_state[f"{prefix}active_topic"] = next(iter(topics), "–ù–æ–≤–∞—è —Ç–µ–º–∞")
                        if st.session_state[f"{prefix}active_topic"] not in topics:
                            st.session_state[f"{prefix}topics"][st.session_state[f'{prefix}active_topic']] = []
                    st.experimental_rerun()

# === –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–æ–∫–æ–≤—ã—Ö –ø–∞–Ω–µ–ª–µ–π ===
sidebar("user")

# === –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ===
col_user, col_support = st.columns(2)

# === –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
with col_user:
    st.subheader("üë§ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    user_topics = st.session_state.user_topics
    active_user_topic = st.session_state.user_active_topic

    st.caption(f"üí¨ –¢–µ–º–∞: {active_user_topic}")
    for msg in user_topics[active_user_topic]:
        with st.chat_message(msg["role"]):
            align = "right" if msg["role"] == "user" else "left"
            st.markdown(f"<div style='text-align: {align};'>{msg['content']}</div>", unsafe_allow_html=True)

    user_input = st.text_input("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ:", key="user_input")
    if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"):
        if user_input:
            # –ï—Å–ª–∏ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ç–µ–º—É
            if len(user_topics[active_user_topic]) == 0:
                new_name = generate_topic_name(user_input)
                user_topics[new_name] = user_topics.pop(active_user_topic)
                st.session_state.user_active_topic = new_name
                active_user_topic = new_name

            user_topics[active_user_topic].append({"role": "user", "content": user_input})

# === –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ü–æ–¥–¥–µ—Ä–∂–∫–∏ ===
with col_support:
    st.subheader("üõ†Ô∏è –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ü–æ–¥–¥–µ—Ä–∂–∫–∏")
    support_topics = st.session_state.support_topics
    active_support_topic = st.session_state.support_active_topic

    st.caption(f"üí¨ –¢–µ–º–∞: {active_support_topic}")
    for msg in support_topics[active_support_topic]:
        with st.chat_message(msg["role"]):
            align = "right" if msg["role"] == "assistant" else "left"
            st.markdown(f"<div style='text-align: {align};'>{msg['content']}</div>", unsafe_allow_html=True)

    support_input = st.text_input("–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ç–≤–µ—á–∞–µ—Ç:", key="support_input")
    if st.button("–û—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –ü–æ–¥–¥–µ—Ä–∂–∫–∞"):
        if support_input:
            # –ï—Å–ª–∏ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ç–µ–º—É
            if len(support_topics[active_support_topic]) == 0:
                new_name = generate_topic_name(support_input)
                support_topics[new_name] = support_topics.pop(active_support_topic)
                st.session_state.support_active_topic = new_name
                active_support_topic = new_name

            support_topics[active_support_topic].append({"role": "assistant", "content": support_input})